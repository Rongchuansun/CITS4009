choices = unique(data$Country),
selected = unique(data$Country)[1])
),
mainPanel(
plotOutput("pieChart")
)
))
)
server <- function(input, output) {
output$categoryPlot <- renderPlot({
df <- data %>%
filter(category == input$category)
ggplot(df, aes(x = uploads, y = subscribers)) +
geom_line(aes(group = 1), color = "blue") +
labs(title = paste("Subscribers vs Uploads for", input$category),
x = "Number of Uploads",
y = "Number of Subscribers") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$interactiveMapRank <- renderLeaflet({
subset_data <- data %>%
filter(rank >= input$rankRange[1] & rank <= input$rankRange[2])
country_counts <- subset_data %>%
group_by(Country) %>%
summarise(
count = n(),
avgLat = mean(Latitude, na.rm = TRUE),
avgLong = mean(Longitude, na.rm = TRUE)
) %>%
ungroup()
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = country_counts,
lng = ~avgLong,
lat = ~avgLat,
weight = 1,
radius = ~sqrt(count) * 3,
fillColor = "blue",
fillOpacity = 0.5,
popup = ~paste(Country, ": ", count, " YouTubers")
)
})
output$pieChart <- renderPlot({
selected_data <- dplyr::filter(data, Country == input$selectedCountry)
channel_count <- selected_data %>%
group_by(channel_type) %>%
summarise(n = n())
ggplot(channel_count, aes(x = "", y = n, fill = channel_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = paste("Youtuber Channel Type Distribution in", input$selectedCountry),
fill = "Channel Type")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
ui <- navbarPage(
title = "YouTube Data Analysis",
theme = shinytheme("cerulean"),
tabPanel("Subscribers vs Uploads Analysis",
sidebarLayout(
sidebarPanel(
selectInput("category",
label = "Choose a Category:",
choices = unique(data$category))
),
mainPanel(
plotOutput("categoryPlot")
)
)),
tabPanel("YouTuber Distribution by Rank",
sidebarLayout(
sidebarPanel(
sliderInput("rankRange", "Select Rank Range:",
min = 1, max = 995, value = c(1, 995))
),
mainPanel(
leafletOutput("interactiveMapRank")
)
)),
tabPanel("Youtuber Channel Type Distribution",
sidebarLayout(
sidebarPanel(
selectInput("selectedCountry",
label = "Choose a country:",
choices = unique(data$Country),
selected = unique(data$Country)[1])
),
mainPanel(
plotOutput("pieChart")
)
))
)
server <- function(input, output) {
output$categoryPlot <- renderPlot({
df <- data %>%
filter(category == input$category)
ggplot(df, aes(x = uploads, y = subscribers)) +
geom_line(aes(group = 1), color = "blue") +
labs(title = paste("Subscribers vs Uploads for", input$category),
x = "Number of Uploads",
y = "Number of Subscribers") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$interactiveMapRank <- renderLeaflet({
subset_data <- data %>%
filter(rank >= input$rankRange[1] & rank <= input$rankRange[2])
country_counts <- subset_data %>%
group_by(Country) %>%
summarise(
count = n(),
avgLat = mean(Latitude, na.rm = TRUE),
avgLong = mean(Longitude, na.rm = TRUE)
) %>%
ungroup()
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = country_counts,
lng = ~avgLong,
lat = ~avgLat,
weight = 1,
radius = ~sqrt(count) * 3,
fillColor = "blue",
fillOpacity = 0.5,
popup = ~paste(Country, ": ", count, " YouTubers")
)
})
output$pieChart <- renderPlot({
selected_data <- dplyr::filter(data, Country == input$selectedCountry)
channel_count <- selected_data %>%
group_by(channel_type) %>%
summarise(n = n())
ggplot(channel_count, aes(x = "", y = n, fill = channel_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = paste("Youtuber Channel Type Distribution in", input$selectedCountry),
fill = "Channel Type")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
ui <- navbarPage(
title = "YouTube Data Analysis",
theme = shinytheme("cerulean"),
tabPanel("Subscribers vs Uploads Analysis",
sidebarLayout(
sidebarPanel(
selectInput("category",
label = "Choose a Category:",
choices = unique(data$category))
),
mainPanel(
plotOutput("categoryPlot")
)
)),
tabPanel("YouTuber Distribution by Rank",
sidebarLayout(
sidebarPanel(
sliderInput("rankRange", "Select Rank Range:",
min = 1, max = 995, value = c(1, 995))
),
mainPanel(
leafletOutput("interactiveMapRank")
)
)),
tabPanel("Youtuber Channel Type Distribution",
sidebarLayout(
sidebarPanel(
selectInput("selectedCountry",
label = "Choose a country:",
choices = unique(data$Country),
selected = unique(data$Country)[1])
),
mainPanel(
plotOutput("pieChart")
)
))
)
server <- function(input, output) {
output$categoryPlot <- renderPlot({
df <- data %>%
filter(category == input$category)
ggplot(df, aes(x = uploads, y = subscribers)) +
geom_line(aes(group = 1), color = "blue") +
labs(title = paste("Subscribers vs Uploads for", input$category),
x = "Number of Uploads",
y = "Number of Subscribers") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$interactiveMapRank <- renderLeaflet({
subset_data <- data %>%
filter(rank >= input$rankRange[1] & rank <= input$rankRange[2])
country_counts <- subset_data %>%
group_by(Country) %>%
summarise(
count = n(),
avgLat = mean(Latitude, na.rm = TRUE),
avgLong = mean(Longitude, na.rm = TRUE)
) %>%
ungroup()
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = country_counts,
lng = ~avgLong,
lat = ~avgLat,
weight = 1,
radius = ~sqrt(count) * 3,
fillColor = "blue",
fillOpacity = 0.5,
popup = ~paste(Country, ": ", count, " YouTubers")
)
})
output$pieChart <- renderPlot({
selected_data <- dplyr::filter(data, Country == input$selectedCountry)
channel_count <- selected_data %>%
group_by(channel_type) %>%
summarise(n = n())
ggplot(channel_count, aes(x = "", y = n, fill = channel_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = paste("Youtuber Channel Type Distribution in", input$selectedCountry),
fill = "Channel Type")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
ui <- navbarPage(
title = "YouTube Data Analysis",
theme = shinytheme("cerulean"),
tabPanel("Subscribers vs Uploads Analysis",
sidebarLayout(
sidebarPanel(
selectInput("category",
label = "Choose a Category:",
choices = unique(data$category))
),
mainPanel(
plotOutput("categoryPlot")
)
)),
tabPanel("YouTuber Distribution by Rank",
sidebarLayout(
sidebarPanel(
sliderInput("rankRange", "Select Rank Range:",
min = 1, max = 995, value = c(1, 995))
),
mainPanel(
leafletOutput("interactiveMapRank")
)
)),
tabPanel("Youtuber Channel Type Distribution",
sidebarLayout(
sidebarPanel(
selectInput("selectedCountry",
label = "Choose a country:",
choices = unique(data$Country),
selected = unique(data$Country)[1])
),
mainPanel(
plotOutput("pieChart")
)
))
)
server <- function(input, output) {
output$categoryPlot <- renderPlot({
df <- data %>%
filter(category == input$category)
ggplot(df, aes(x = uploads, y = subscribers)) +
geom_line(aes(group = 1), color = "blue") +
labs(title = paste("Subscribers vs Uploads for", input$category),
x = "Number of Uploads",
y = "Number of Subscribers") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$interactiveMapRank <- renderLeaflet({
subset_data <- data %>%
filter(rank >= input$rankRange[1] & rank <= input$rankRange[2])
country_counts <- subset_data %>%
group_by(Country) %>%
summarise(
count = n(),
avgLat = mean(Latitude, na.rm = TRUE),
avgLong = mean(Longitude, na.rm = TRUE)
) %>%
ungroup()
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = country_counts,
lng = ~avgLong,
lat = ~avgLat,
weight = 1,
radius = ~sqrt(count) * 3,
fillColor = "blue",
fillOpacity = 0.5,
popup = ~paste(Country, ": ", count, " YouTubers")
)
})
output$pieChart <- renderPlot({
selected_data <- dplyr::filter(data, Country == input$selectedCountry)
channel_count <- selected_data %>%
group_by(channel_type) %>%
summarise(n = n())
ggplot(channel_count, aes(x = "", y = n, fill = channel_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = paste("Youtuber Channel Type Distribution in", input$selectedCountry),
fill = "Channel Type")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
ui <- navbarPage(
title = "YouTube Data Analysis",
theme = shinytheme("cerulean"),
tabPanel("Subscribers vs Uploads Analysis",
sidebarLayout(
sidebarPanel(
selectInput("category",
label = "Choose a Category:",
choices = unique(data$category))
),
mainPanel(
plotOutput("categoryPlot")
)
)),
tabPanel("YouTuber Distribution by Rank",
sidebarLayout(
sidebarPanel(
sliderInput("rankRange", "Select Rank Range:",
min = 1, max = 995, value = c(1, 995))
),
mainPanel(
leafletOutput("interactiveMapRank")
)
)),
tabPanel("Youtuber Channel Type Distribution",
sidebarLayout(
sidebarPanel(
selectInput("selectedCountry",
label = "Choose a country:",
choices = unique(data$Country),
selected = unique(data$Country)[1])
),
mainPanel(
plotOutput("pieChart")
)
))
)
server <- function(input, output) {
output$categoryPlot <- renderPlot({
df <- data %>%
filter(category == input$category)
ggplot(df, aes(x = uploads, y = subscribers)) +
geom_line(aes(group = 1), color = "blue") +
labs(title = paste("Subscribers vs Uploads for", input$category),
x = "Number of Uploads",
y = "Number of Subscribers") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$interactiveMapRank <- renderLeaflet({
subset_data <- data %>%
filter(rank >= input$rankRange[1] & rank <= input$rankRange[2])
country_counts <- subset_data %>%
group_by(Country) %>%
summarise(
count = n(),
avgLat = mean(Latitude, na.rm = TRUE),
avgLong = mean(Longitude, na.rm = TRUE)
) %>%
ungroup()
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = country_counts,
lng = ~avgLong,
lat = ~avgLat,
weight = 1,
radius = ~sqrt(count) * 3,
fillColor = "blue",
fillOpacity = 0.5,
popup = ~paste(Country, ": ", count, " YouTubers")
)
})
output$pieChart <- renderPlot({
selected_data <- dplyr::filter(data, Country == input$selectedCountry)
channel_count <- selected_data %>%
group_by(channel_type) %>%
summarise(n = n())
ggplot(channel_count, aes(x = "", y = n, fill = channel_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = paste("Youtuber Channel Type Distribution in", input$selectedCountry),
fill = "Channel Type")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
ui <- navbarPage(
title = "YouTube Data Analysis",
theme = shinytheme("cerulean"),
tabPanel("Subscribers vs Uploads Analysis",
sidebarLayout(
sidebarPanel(
selectInput("category",
label = "Choose a Category:",
choices = unique(data$category))
),
mainPanel(
plotOutput("categoryPlot")
)
)),
tabPanel("YouTuber Distribution by Rank",
sidebarLayout(
sidebarPanel(
sliderInput("rankRange", "Select Rank Range:",
min = 1, max = 995, value = c(1, 995))
),
mainPanel(
leafletOutput("interactiveMapRank")
)
)),
tabPanel("Youtuber Channel Type Distribution",
sidebarLayout(
sidebarPanel(
selectInput("selectedCountry",
label = "Choose a country:",
choices = unique(data$Country),
selected = unique(data$Country)[1])
),
mainPanel(
plotOutput("pieChart")
)
))
)
server <- function(input, output) {
output$categoryPlot <- renderPlot({
df <- data %>%
filter(category == input$category)
ggplot(df, aes(x = uploads, y = subscribers)) +
geom_line(aes(group = 1), color = "blue") +
labs(title = paste("Subscribers vs Uploads for", input$category),
x = "Number of Uploads",
y = "Number of Subscribers") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$interactiveMapRank <- renderLeaflet({
subset_data <- data %>%
filter(rank >= input$rankRange[1] & rank <= input$rankRange[2])
country_counts <- subset_data %>%
group_by(Country) %>%
summarise(
count = n(),
avgLat = mean(Latitude, na.rm = TRUE),
avgLong = mean(Longitude, na.rm = TRUE)
) %>%
ungroup()
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = country_counts,
lng = ~avgLong,
lat = ~avgLat,
weight = 1,
radius = ~sqrt(count) * 3,
fillColor = "blue",
fillOpacity = 0.5,
popup = ~paste(Country, ": ", count, " YouTubers")
)
})
output$pieChart <- renderPlot({
selected_data <- dplyr::filter(data, Country == input$selectedCountry)
channel_count <- selected_data %>%
group_by(channel_type) %>%
summarise(n = n())
ggplot(channel_count, aes(x = "", y = n, fill = channel_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = paste("Youtuber Channel Type Distribution in", input$selectedCountry),
fill = "Channel Type")
})
}
shinyApp(ui = ui, server = server)
